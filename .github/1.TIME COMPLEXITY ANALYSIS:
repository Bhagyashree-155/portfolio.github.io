Task 1:
Write a recursive C++ program for Towers of Brahma problem and record the time taken for following given input size. Use a spreadsheet application and plot a graph presenting your results.
      ->       Program:
#include <iostream>
#include <ctime>
using namespace std;
void towers(int n, string from, string to, string aux) {
if (n == 1) {
cout << "Move disc 1 from " << from << " to " << to << endl;
return;
}
towers(n-1, from, aux, to);
cout << "Move disc " << n << " from " << from << " to " << to << endl;
towers(n-1, aux, to, from);
}

int main() {
int n;
string A = "A", B = "B", C = "C";
cin >> n;

// Start measuring time
clock_t start = clock();

towers(n, A, C, B);

// Stop measuring time
clock_t end = clock();
double elapsed = double(end - start) / CLOCKS_PER_SEC;

cout << "Time taken for execution: " << elapsed << " seconds" << endl;

return 0;
}

Table:
	
Table:	
X-axis	Y-axis
Input	Time
1	0.649
2	0.65
3	0.937
4	1.554
5	1.98
6	3.365


 







 
Task 2:
Compare and present the orders of growth of linear search and binary search for the best-case, worst-case and average case inputs for the given below input sizes. Use rand() function to generate the random array inputs between size 0 to 1000. Present your results using a spreadsheet application with an appropriate  graphs. Do not use any form of print statements while capturing the time for the program. The  table and graph has to be generated for best case, worst case and average case.
ïƒ¨	Program

#include<iostream>
#include<ctime>
#include<cstdlib>
#include<algorithm>  // For std::sort
using namespace std;

#define SIZE 50000
#define ITER 10000  // Number of iterations to average the time

int linear_search(int a[SIZE], int target)
{
    for(int i = 0; i < SIZE; i++)
    {
        if(a[i] == target)
            return i;
    }
    return -1;
}

int Binarysearch(int a[SIZE], int target)
{
    int low = 0;
    int high = SIZE - 1;
    int mid;
    while(low <= high)
    {
        mid = (low + high) / 2;
        if(a[mid] == target)
        {
            return mid;
        }
        if(target > a[mid])
        {
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
    }
    return -1;
}

int main()
{
    int a[SIZE];
    int target;
    srand(78);

    for(int i = 0; i < SIZE; i++)
    {
        a[i] = rand() % SIZE;
        cout << a[i] << " ";
    }

    cout << "\nEnter the target number to search: ";
    cin >> target;
    cout << "\nArray Size: " << SIZE << "\n";

    // Measure Linear Search time with iterations
    clock_t start = clock();
    for (int i = 0; i < ITER; i++)
    {
        linear_search(a, target);
    }
    clock_t end = clock();
    double linearTime = double(end - start) / (CLOCKS_PER_SEC * ITER);
    cout << "Linear Search Time (average per iteration): " << linearTime << " seconds\n";

    sort(a, a + SIZE);

    // Measure Binary Search time with iterations
    start = clock();
    for (int i = 0; i < ITER; i++)
    {
        Binarysearch(a, target);
    }
    end = clock();
    double binaryTime = double(end - start) / (CLOCKS_PER_SEC * ITER);
    cout << "Binary Search Time (average per iteration): " << binaryTime << " seconds\n";

    return 0;
}
	best		
input	linear search	binary search
  100	0.001	0.001	
1000	0.001	0.001	
5000	0.001	0.001	
10000	0.001	0.001	
50000	0.001	0.001	
 
	Average	
x axis	yaxis	y axis
input size	linear	binary
100	0	0.135
500	1.87	0.45
1000	2.41	1.35
5000	2.75	1.48
10000	3.85	2.51
50000	4.01	3.42

	





